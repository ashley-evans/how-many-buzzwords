Transform: AWS::Serverless-2016-10-31
Description: Crawl Service
Parameters:
  EnvironmentNameSuffix:
    Type: String
    Description: Environment name suffixed to service resources
    Default: dev
Resources:
  CrawlNodeDependencyLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: !Sub CrawlNodeDependencyLayer-${EnvironmentNameSuffix}
      Description: Common crawl service node module layer
      CompatibleRuntimes:
        - nodejs14.x
      ContentUri: ./functions
      RetentionPolicy: Delete
    Metadata:
      BuildMethod: makefile
  CrawlCommonLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: !Sub CrawlCommonLayer-${EnvironmentNameSuffix}
      ContentUri: ./common
      CompatibleRuntimes:
        - nodejs14.x
      RetentionPolicy: Delete
    Metadata:
      BuildMethod: makefile
  URLsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: BaseUrl
          AttributeType: S
        - AttributeName: Pathname
          AttributeType: S
      KeySchema:
        - AttributeName: BaseUrl
          KeyType: HASH
        - AttributeName: Pathname
          KeyType: RANGE
      StreamSpecification:
        StreamViewType: NEW_IMAGE
  CrawlURLsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: URLsTableWritePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                  - dynamodb:PutItem
                Resource: !GetAtt URLsTable.Arn
                Effect: Allow
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
  CrawlURLs:
    Type: AWS::Serverless::Function
    Properties:
      Handler: crawl-urls.handler
      Role: !GetAtt CrawlURLsRole.Arn
      Runtime: nodejs14.x
      CodeUri: ./functions/crawl-urls
      Description: Crawls a batch of URLs and stores accessible pathnames in DynamoDB
      Layers:
        - Ref: CrawlNodeDependencyLayer
        - Ref: CrawlCommonLayer
      Timeout: 120
      MemorySize: 256
      Environment:
        Variables:
          TABLE_NAME: !Ref URLsTable
          MAX_REQUESTS_PER_CRAWL: 50
          MAX_CRAWL_DEPTH: 20
          ERROR_LOGGING_ENABLED: true
          APIFY_LOCAL_STORAGE_DIR: /tmp/apify_storage/
  CrawlServiceEventBus:
    Type: AWS::Events::EventBus
    Properties:
      Name: !Sub "CrawlServiceEventBus-${EnvironmentNameSuffix}"
  PublishURLFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: URLsTableReadStreamPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                  - dynamodb:DescribeStream
                  - dynamodb:GetRecords
                  - dynamodb:GetShardIterator
                  - dynamodb:ListStreams
                Resource: !GetAtt URLsTable.StreamArn
                Effect: Allow
        - PolicyName: PutEventsPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                - events:PutEvents
                Resource: !GetAtt CrawlServiceEventBus.Arn
                Effect: Allow
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
  PublishURLsLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: publish-urls.handler
      Role: !GetAtt PublishURLFunctionRole.Arn
      Runtime: nodejs14.x
      CodeUri: ./functions/publish-urls
      Description: Publishes crawled URLs to an SNS Topic for subscribers
      Layers:
        - Ref: CrawlNodeDependencyLayer
        - Ref: CrawlCommonLayer
      Events:
        URLsTableStreamEvent:
          Type: DynamoDB
          Properties:
            Stream: !GetAtt URLsTable.StreamArn
            StartingPosition: LATEST
      Environment:
        Variables:
          EVENT_BUS_ARN: !GetAtt CrawlServiceEventBus.Arn
  URLsCRUDFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: urls-crud.handler
      Runtime: nodejs14.x
      CodeUri: ./functions/urls-crud
      Description: CRUD function for the URLs Table
      Layers:
        - Ref: CrawlNodeDependencyLayer
        - Ref: CrawlCommonLayer
      Policies:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      - Version: '2012-10-17'
        Statement:
        - Sid: URLsTableCRUDPolicy
          Effect: Allow
          Action:
          - dynamodb:Query
          Resource: !GetAtt URLsTable.Arn
      Environment:
        Variables:
          TABLE_NAME: !Ref URLsTable
          ERROR_LOGGING_ENABLED: true
  URLsCRUDAccessRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - apigateway.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
        - PolicyName: InvokeURLsCRUDFunctionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                  - lambda:InvokeFunction
                Resource: !GetAtt URLsCRUDFunction.Arn
                Effect: Allow
  CrawlStateMachineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - states.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
        - PolicyName: InvokeCrawlURLs
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                  - lambda:InvokeFunction
                Resource: !GetAtt CrawlURLs.Arn
                Effect: Allow
        - PolicyName: PutEventsPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                  - sns:Publish
                Resource: !GetAtt CrawlServiceEventBus.Arn
                Effect: Allow
  CrawlStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      Type: STANDARD
      Tracing:
        Enabled: true
      DefinitionUri: ./crawl-state-machine.asl.json
      DefinitionSubstitutions:
        CrawlURLsARN: !GetAtt CrawlURLs.Arn
        CrawlServiceEventBusARN: !GetAtt CrawlServiceEventBus.Arn
      Role: !GetAtt CrawlStateMachineRole.Arn
  InvokeCrawlStateMachineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - apigateway.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
        - PolicyName: InvokeCrawlStateMachine
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                  - states:StartExecution
                Resource: !GetAtt CrawlStateMachine.Arn
                Effect: Allow
  CrawlHTTPGateway:
    Type: AWS::Serverless::HttpApi
    Properties:
      DefinitionBody:
        Fn::Transform:
          Name: AWS::Include
          Parameters:
            Location: ./crawl-openapi.yml
      FailOnWarnings: true
Outputs:
  EventBridgeARN:
    Description: The ARN for the Crawl Service's Event Bus
    Value: !GetAtt CrawlServiceEventBus.Arn
