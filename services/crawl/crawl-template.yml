Transform: AWS::Serverless-2016-10-31
Description: Crawl Service
Parameters:
    EnvironmentNameSuffix:
        Type: String
        Description: Environment name suffixed to service resources
        Default: dev
    APIKeyExpiryTime:
        Type: Number
        Description: The time at which the API Key for GraphQL will expire, in seconds since epoch
Resources:
    CrawlNodeDependencyLayer:
        Type: AWS::Serverless::LayerVersion
        Properties:
            LayerName: !Sub CrawlNodeDependencyLayer-${EnvironmentNameSuffix}
            ContentUri: ./functions
            CompatibleRuntimes:
                - nodejs16.x
            RetentionPolicy: Delete
        Metadata:
            BuildMethod: makefile
    CrawlCommonLayer:
        Type: AWS::Serverless::LayerVersion
        Properties:
            LayerName: !Sub CrawlCommonLayer-${EnvironmentNameSuffix}
            ContentUri: ./common
            CompatibleRuntimes:
                - nodejs16.x
            RetentionPolicy: Delete
        Metadata:
            BuildMethod: makefile
    URLsRepositoryLibraryLayer:
        Type: AWS::Serverless::LayerVersion
        Properties:
            LayerName: !Sub URLsRepositoryLibraryLayer-${EnvironmentNameSuffix}
            ContentUri: ./libs/urls-repository-library
            CompatibleRuntimes:
                - nodejs16.x
            RetentionPolicy: Delete
        Metadata:
            BuildMethod: makefile
    ContentRepositoryLibraryLayer:
        Type: AWS::Serverless::LayerVersion
        Properties:
            LayerName: !Sub ContentRepositoryLibraryLayer-${EnvironmentNameSuffix}
            ContentUri: ./libs/content-repository-library
            CompatibleRuntimes:
                - nodejs16.x
            RetentionPolicy: Delete
        Metadata:
            BuildMethod: makefile
    URLsTable:
        Type: AWS::DynamoDB::Table
        Properties:
            BillingMode: PAY_PER_REQUEST
            AttributeDefinitions:
                - AttributeName: pk
                  AttributeType: S
                - AttributeName: sk
                  AttributeType: S
            KeySchema:
                - AttributeName: pk
                  KeyType: HASH
                - AttributeName: sk
                  KeyType: RANGE
            StreamSpecification:
                StreamViewType: NEW_IMAGE
    CrawlContentBucket:
        Type: AWS::S3::Bucket
        Properties:
            AccessControl: Private
            PublicAccessBlockConfiguration:
                BlockPublicAcls: true
                BlockPublicPolicy: true
                IgnorePublicAcls: true
                RestrictPublicBuckets: true
    CrawlURLsRole:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    - Effect: Allow
                      Principal:
                          Service:
                              - lambda.amazonaws.com
                      Action:
                          - sts:AssumeRole
            Path: /
            Policies:
                - PolicyName: URLsTableCrawlPolicy
                  PolicyDocument:
                      Version: "2012-10-17"
                      Statement:
                          - Action:
                                - dynamodb:DescribeTable
                                - dynamodb:Query
                                - dynamodb:BatchWriteItem
                                - dynamodb:PutItem
                            Resource: !GetAtt URLsTable.Arn
                            Effect: Allow
                - PolicyName: ContentBucketCrawlPolicy
                  PolicyDocument:
                      Version: "2012-10-17"
                      Statement:
                          - Action:
                                - s3:PutObject
                            Resource: !Sub "${CrawlContentBucket.Arn}/*"
                            Effect: Allow
            ManagedPolicyArns:
                - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    CrawlURLs:
        Type: AWS::Serverless::Function
        Properties:
            Handler: crawl-urls.handler
            Role: !GetAtt CrawlURLsRole.Arn
            Runtime: nodejs16.x
            CodeUri: ./functions/crawl-urls
            Description: Crawls a batch of URLs and stores accessible pathnames in DynamoDB
            Layers:
                - Ref: URLsRepositoryLibraryLayer
                - Ref: ContentRepositoryLibraryLayer
                - Ref: CrawlNodeDependencyLayer
            Timeout: 120
            MemorySize: 2048
            Architectures:
                - arm64
            Environment:
                Variables:
                    TABLE_NAME: !Ref URLsTable
                    CONTENT_BUCKET_NAME: !Ref CrawlContentBucket
                    MAX_REQUESTS_PER_CRAWL: 50
                    MAX_CRAWL_DEPTH: 20
                    CRAWLEE_STORAGE_DIR: /tmp/crawlee_storage/
                    CRAWLEE_MEMORY_MBYTES: 1536
                    MIN_CONCURRENCY: 10
                    MAX_CONCURRENCY: 20
                    AUTOSCALE_INTERVAL: 20
    CrawlServiceEventBus:
        Type: AWS::Events::EventBus
        Properties:
            Name: !Sub "CrawlServiceEventBus-${EnvironmentNameSuffix}"
    PublishURLFunctionRole:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    - Effect: Allow
                      Principal:
                          Service:
                              - lambda.amazonaws.com
                      Action:
                          - sts:AssumeRole
            Path: /
            Policies:
                - PolicyName: URLsTableReadStreamPolicy
                  PolicyDocument:
                      Version: "2012-10-17"
                      Statement:
                          - Action:
                                - dynamodb:DescribeStream
                                - dynamodb:GetRecords
                                - dynamodb:GetShardIterator
                                - dynamodb:ListStreams
                            Resource: !GetAtt URLsTable.StreamArn
                            Effect: Allow
                - PolicyName: PutEventsPolicy
                  PolicyDocument:
                      Version: "2012-10-17"
                      Statement:
                          - Action:
                                - events:PutEvents
                            Resource: !GetAtt CrawlServiceEventBus.Arn
                            Effect: Allow
            ManagedPolicyArns:
                - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    PublishURLsLambda:
        Type: AWS::Serverless::Function
        Properties:
            Handler: publish-urls.handler
            Role: !GetAtt PublishURLFunctionRole.Arn
            Runtime: nodejs16.x
            CodeUri: ./functions/publish-urls
            Description: Publishes crawled URLs to an SNS Topic for subscribers
            Layers:
                - Ref: CrawlCommonLayer
            Events:
                URLsTableStreamEvent:
                    Type: DynamoDB
                    Properties:
                        Stream: !GetAtt URLsTable.StreamArn
                        StartingPosition: LATEST
            Architectures:
                - arm64
            Environment:
                Variables:
                    EVENT_BUS_ARN: !GetAtt CrawlServiceEventBus.Arn
    GetURLs:
        Type: AWS::Serverless::Function
        Properties:
            Handler: get-urls.handler
            Runtime: nodejs16.x
            CodeUri: ./functions/urls-crud/functions/get-urls
            Description: GETs the pathnames crawled from a given URL
            Layers:
                - Ref: URLsRepositoryLibraryLayer
            Timeout: 6
            Policies:
                - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
                - Version: "2012-10-17"
                  Statement:
                      - Sid: URLsTableCRUDPolicy
                        Effect: Allow
                        Action:
                            - dynamodb:DescribeTable
                            - dynamodb:Query
                        Resource: !GetAtt URLsTable.Arn
            Architectures:
                - arm64
            Environment:
                Variables:
                    TABLE_NAME: !Ref URLsTable
    GetURLsAccessRole:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    - Effect: Allow
                      Principal:
                          Service:
                              - appsync.amazonaws.com
                      Action:
                          - sts:AssumeRole
            Policies:
                - PolicyName: InvokeGetURLsPolicy
                  PolicyDocument:
                      Version: "2012-10-17"
                      Statement:
                          - Action:
                                - lambda:InvokeFunction
                            Resource: !GetAtt GetURLs.Arn
                            Effect: Allow
    RecentCrawlRole:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    - Effect: Allow
                      Principal:
                          Service:
                              - lambda.amazonaws.com
                      Action:
                          - sts:AssumeRole
            Path: /
            Policies:
                - PolicyName: URLsTableCrawlPolicy
                  PolicyDocument:
                      Version: "2012-10-17"
                      Statement:
                          - Action:
                                - dynamodb:DescribeTable
                                - dynamodb:Query
                            Resource: !GetAtt URLsTable.Arn
                            Effect: Allow
            ManagedPolicyArns:
                - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    RecentCrawl:
        Type: AWS::Serverless::Function
        Properties:
            Handler: recent-crawl.handler
            Role: !GetAtt RecentCrawlRole.Arn
            Runtime: nodejs16.x
            CodeUri: ./functions/recent-crawl
            Description: Returns whether the URL has been crawled within configured time
            Layers:
                - Ref: URLsRepositoryLibraryLayer
                - Ref: CrawlNodeDependencyLayer
            Architectures:
                - arm64
            Environment:
                Variables:
                    TABLE_NAME: !Ref URLsTable
                    MAX_CRAWL_AGE_HOURS: 48
    GetContent:
        Type: AWS::Serverless::Function
        Properties:
            Handler: get-content.handler
            Runtime: nodejs16.x
            CodeUri: ./functions/urls-crud/functions/get-content
            Description: GETs any stored content for a given URL
            Layers:
                - Ref: ContentRepositoryLibraryLayer
                - Ref: CrawlNodeDependencyLayer
            Timeout: 6
            MemorySize: 256
            Policies:
                - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
                - Version: "2012-10-17"
                  Statement:
                      - Sid: S3GetPolicy
                        Effect: Allow
                        Action:
                            - s3:GetObject
                        Resource: !Sub "${CrawlContentBucket.Arn}/*"
            Architectures:
                - arm64
            Environment:
                Variables:
                    CONTENT_BUCKET_NAME: !Ref CrawlContentBucket
    GetContentAccessRole:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    - Effect: Allow
                      Principal:
                          Service:
                              - apigateway.amazonaws.com
                      Action:
                          - sts:AssumeRole
            Policies:
                - PolicyName: InvokeGetContentPolicy
                  PolicyDocument:
                      Version: "2012-10-17"
                      Statement:
                          - Action:
                                - lambda:InvokeFunction
                            Resource: !GetAtt GetContent.Arn
                            Effect: Allow
    CrawlStateMachineRole:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    - Effect: Allow
                      Principal:
                          Service:
                              - states.amazonaws.com
                      Action:
                          - sts:AssumeRole
            Policies:
                - PolicyName: InvokeCrawlURLs
                  PolicyDocument:
                      Version: "2012-10-17"
                      Statement:
                          - Action:
                                - lambda:InvokeFunction
                            Resource: !GetAtt CrawlURLs.Arn
                            Effect: Allow
                - PolicyName: InvokeRecentCrawl
                  PolicyDocument:
                      Version: "2012-10-17"
                      Statement:
                          - Action:
                                - lambda:InvokeFunction
                            Resource: !GetAtt RecentCrawl.Arn
                            Effect: Allow
                - PolicyName: InvokeUpdateStatus
                  PolicyDocument:
                      Version: "2012-10-17"
                      Statement:
                          - Action:
                                - lambda:InvokeFunction
                            Resource: !GetAtt UpdateStatus.Arn
                            Effect: Allow
                - PolicyName: PutEventsPolicy
                  PolicyDocument:
                      Version: "2012-10-17"
                      Statement:
                          - Action:
                                - events:PutEvents
                            Resource: !GetAtt CrawlServiceEventBus.Arn
                            Effect: Allow
    CrawlStateMachine:
        Type: AWS::Serverless::StateMachine
        Properties:
            Type: STANDARD
            Tracing:
                Enabled: true
            DefinitionUri: ./crawl-state-machine.asl.json
            DefinitionSubstitutions:
                RecentCrawlARN: !GetAtt RecentCrawl.Arn
                CrawlURLsARN: !GetAtt CrawlURLs.Arn
                CrawlServiceEventBusARN: !GetAtt CrawlServiceEventBus.Arn
                UpdateStatusARN: !GetAtt UpdateStatus.Arn
            Role: !GetAtt CrawlStateMachineRole.Arn
    InvokeCrawlStateMachineRole:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    - Effect: Allow
                      Principal:
                          Service:
                              - appsync.amazonaws.com
                      Action:
                          - sts:AssumeRole
            Policies:
                - PolicyName: InvokeCrawlStateMachine
                  PolicyDocument:
                      Version: "2012-10-17"
                      Statement:
                          - Action:
                                - states:StartExecution
                            Resource: !GetAtt CrawlStateMachine.Arn
                            Effect: Allow
    CrawlHTTPGatewayAccessLogs:
        Type: AWS::Logs::LogGroup
        Properties:
            LogGroupName: !Sub "/aws/vendedlogs/CrawlHTTPGatewayAccessLogs-${EnvironmentNameSuffix}"
            RetentionInDays: 30
    CrawlHTTPGateway:
        Type: AWS::Serverless::HttpApi
        Properties:
            DefinitionBody:
                openapi: "3.0.1"
                info:
                    title:
                        Fn::Sub: "buzzword-crawl-service-${EnvironmentNameSuffix}"
                    description: "Crawl Service API Gateway"
                    version: "1.0"
                paths:
                    /content:
                        get:
                            parameters:
                                [
                                    {
                                        name: "url",
                                        in: "query",
                                        required: true,
                                        schema: { type: "string" },
                                    },
                                ]
                            x-amazon-apigateway-integration:
                                $ref: "#/components/x-amazon-apigateway-integrations/get-content-integration"
                components:
                    x-amazon-apigateway-integrations:
                        get-content-integration:
                            type: "aws_proxy"
                            httpMethod: "POST"
                            uri:
                                Fn::GetAtt:
                                    - "GetContent"
                                    - "Arn"
                            credentials:
                                Fn::GetAtt:
                                    - "GetContentAccessRole"
                                    - "Arn"
                            payloadFormatVersion: "1.0"
            FailOnWarnings: true
            AccessLogSettings:
                DestinationArn: !GetAtt CrawlHTTPGatewayAccessLogs.Arn
                Format: '{"requestId":"$context.requestId", "errorMessage":"$context.error.message", "path":"$context.path"}'
            CorsConfiguration:
                AllowOrigins:
                    - "*"
                AllowHeaders:
                    - "*"
                AllowMethods:
                    - POST
                    - GET
    CrawlGraphQLAPI:
        Type: AWS::AppSync::GraphQLApi
        Properties:
            Name: !Sub buzzword-crawl-service-graphql-api-${EnvironmentNameSuffix}
            AuthenticationType: AWS_IAM
            AdditionalAuthenticationProviders:
                - AuthenticationType: API_KEY
    CrawlGraphQLAPIKey:
        Type: AWS::AppSync::ApiKey
        Properties:
            ApiId: !GetAtt CrawlGraphQLAPI.ApiId
            Expires: !Ref APIKeyExpiryTime
    CrawlGraphQLAPISchema:
        Type: AWS::AppSync::GraphQLSchema
        Properties:
            ApiId: !GetAtt CrawlGraphQLAPI.ApiId
            DefinitionS3Location: ./schemas/schema.graphql
    URLsDataSource:
        Type: AWS::AppSync::DataSource
        Properties:
            Type: AWS_LAMBDA
            ApiId: !GetAtt CrawlGraphQLAPI.ApiId
            Name: !Sub buzzword_urls_data_source_${EnvironmentNameSuffix}
            LambdaConfig:
                LambdaFunctionArn: !GetAtt GetURLs.Arn
            ServiceRoleArn: !GetAtt GetURLsAccessRole.Arn
    URLResolver:
        Type: AWS::AppSync::Resolver
        Properties:
            TypeName: Query
            ApiId: !GetAtt CrawlGraphQLAPI.ApiId
            FieldName: urls
            DataSourceName: !GetAtt URLsDataSource.Name
            RequestMappingTemplate: |
                {
                    "version": "2017-02-28",
                    "operation": "Invoke",
                    "payload": {
                        "field": "urls",
                        "arguments": $utils.toJson($context.arguments)
                    }
                }
            ResponseMappingTemplate: "$utils.toJson($context.result)"
    CrawlStepFunctionDataSource:
        Type: AWS::AppSync::DataSource
        Properties:
            Type: HTTP
            ApiId: !GetAtt CrawlGraphQLAPI.ApiId
            Name: !Sub buzzword_crawl_step_function_data_source_${EnvironmentNameSuffix}
            HttpConfig:
                Endpoint: !Sub https://states.${AWS::Region}.amazonaws.com
                AuthorizationConfig:
                    AuthorizationType: AWS_IAM
                    AwsIamConfig:
                        SigningRegion: !Ref AWS::Region
                        SigningServiceName: states
            ServiceRoleArn: !GetAtt InvokeCrawlStateMachineRole.Arn
    CrawlResolver:
        Type: AWS::AppSync::Resolver
        Properties:
            TypeName: Mutation
            ApiId: !GetAtt CrawlGraphQLAPI.ApiId
            FieldName: startCrawl
            DataSourceName: !GetAtt CrawlStepFunctionDataSource.Name
            RequestMappingTemplate: !Sub |
                {
                    "version": "2018-05-29",
                    "method": "POST",
                    "resourcePath": "/",
                    "params": {
                        "headers": {
                            "content-type": "application/x-amz-json-1.0",
                            "x-amz-target":"AWSStepFunctions.StartExecution"
                        },
                        "body": {
                            "stateMachineArn": "${CrawlStateMachine}",
                            "input": "$utils.escapeJavaScript($utils.toJson($context.arguments.input))"
                        }
                    }
                }
            ResponseMappingTemplate: |
                #if($context.result.statusCode == 200)
                    #set($resultMap = {
                        "started": true
                    })
                    $utils.toJson($resultMap)
                #else
                    #set($resultMap = {
                        "started": false
                    })
                    $utils.toJson($resultMap)
                #end
    CrawlIdentityPool:
        Type: AWS::Cognito::IdentityPool
        Properties:
            AllowUnauthenticatedIdentities: true
    UnauthenticatedAccessRole:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    - Effect: Allow
                      Principal:
                          Federated:
                              - cognito-identity.amazonaws.com
                      Action:
                          - sts:AssumeRoleWithWebIdentity
                      Condition:
                          StringEquals:
                              cognito-identity.amazonaws.com:aud:
                                  - !Ref CrawlIdentityPool
                          ForAnyValue:StringLike:
                              cognito-identity.amazonaws.com:amr:
                                  - unauthenticated
            Path: /
            Policies:
                - PolicyName: AppSyncCognitoPolicy
                  PolicyDocument:
                      Version: "2012-10-17"
                      Statement:
                          - Action:
                                - mobileanalytics:PutEvents
                                - cognito-sync:*
                                - cognito-identity:*
                            Resource: "*"
                            Effect: Allow
                          - Action:
                                - appsync:GraphQL
                            Resource: !Sub ${CrawlGraphQLAPI.Arn}/*
                            Effect: Allow
    CrawlIdentityPoolRoles:
        Type: AWS::Cognito::IdentityPoolRoleAttachment
        Properties:
            IdentityPoolId: !Ref CrawlIdentityPool
            Roles:
                unauthenticated: !GetAtt UnauthenticatedAccessRole.Arn
    CrawlGraphQLAPINoneDataSource:
        Type: AWS::AppSync::DataSource
        Properties:
            ApiId: !GetAtt CrawlGraphQLAPI.ApiId
            Name: !Sub buzzword_none_data_source_${EnvironmentNameSuffix}
            Type: NONE
    UpdateCrawlStatusResolver:
        Type: AWS::AppSync::Resolver
        Properties:
            ApiId: !GetAtt CrawlGraphQLAPI.ApiId
            TypeName: Mutation
            FieldName: updateCrawlStatus
            DataSourceName: !GetAtt CrawlGraphQLAPINoneDataSource.Name
            RequestMappingTemplate: |
                {
                    "version": "2018-05-29",
                    "payload": $util.toJson($context.arguments)
                }
            ResponseMappingTemplate: |
                $util.toJson($context.result)
    CrawlGraphQLAPIConnection:
        Type: AWS::Events::Connection
        Properties:
            AuthorizationType: API_KEY
            AuthParameters:
                ApiKeyAuthParameters:
                    ApiKeyName: x-api-key
                    ApiKeyValue: !GetAtt CrawlGraphQLAPIKey.ApiKey
    CrawlGraphQLAPIDestination:
        Type: AWS::Events::ApiDestination
        Properties:
            ConnectionArn: !GetAtt CrawlGraphQLAPIConnection.Arn
            InvocationEndpoint: !GetAtt CrawlGraphQLAPI.GraphQLUrl
            HttpMethod: POST
    UpdateCrawlStatusEventRole:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    - Effect: Allow
                      Principal:
                          Service:
                              - events.amazonaws.com
                      Action:
                          - sts:AssumeRole
            Path: /
            Policies:
                - PolicyName: InvokeGraphQLAPIDestination
                  PolicyDocument:
                      Version: "2012-10-17"
                      Statement:
                          - Action:
                                - events:InvokeApiDestination
                            Resource: !Sub arn:aws:events:${AWS::Region}:${AWS::AccountId}:api-destination/${CrawlGraphQLAPIDestination}/*
                            Effect: Allow
    UpdateCrawlStatusEventRule:
        Type: AWS::Events::Rule
        Properties:
            Description: Updates subscribed GraphQL clients with crawl status updates
            State: ENABLED
            EventBusName: !GetAtt CrawlServiceEventBus.Arn
            EventPattern:
                source:
                    - crawl.aws.buzzword
                detail-type:
                    - Crawl Status Update
            Targets:
                - Arn: !GetAtt CrawlGraphQLAPIDestination.Arn
                  Id: update-crawl-status-subscribers
                  RoleArn: !GetAtt UpdateCrawlStatusEventRole.Arn
                  InputTransformer:
                      InputPathsMap:
                          id: "$.detail.baseURL"
                          status: "$.detail.status"
                      InputTemplate: |
                          {
                              "query": "mutation UpdateCrawlStatus($id: ID!, $status: CrawlStatus!) { updateCrawlStatus(id: $id, status: $status) { id status } }",
                              "operationName": "UpdateCrawlStatus",
                              "variables": {
                                  "id": "<id>",
                                  "status": "<status>"
                              }
                          }
    UpdateStatusRole:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    - Effect: Allow
                      Principal:
                          Service:
                              - lambda.amazonaws.com
                      Action:
                          - sts:AssumeRole
            Path: /
            Policies:
                - PolicyName: URLsTableUpdatePolicy
                  PolicyDocument:
                      Version: "2012-10-17"
                      Statement:
                          - Action:
                                - dynamodb:DescribeTable
                                - dynamodb:PutItem
                            Resource: !GetAtt URLsTable.Arn
                            Effect: Allow
                - PolicyName: PublishEventPolicy
                  PolicyDocument:
                      Version: "2012-10-17"
                      Statement:
                          - Action:
                                - events:PutEvents
                            Resource: !GetAtt CrawlServiceEventBus.Arn
                            Effect: Allow
            ManagedPolicyArns:
                - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    UpdateStatus:
        Type: AWS::Serverless::Function
        Properties:
            Handler: update-status.handler
            Role: !GetAtt UpdateStatusRole.Arn
            Runtime: nodejs16.x
            CodeUri: ./functions/update-status
            Description: Updates the status of a crawl for a given URL to a specific status
            Layers:
                - Ref: URLsRepositoryLibraryLayer
                - Ref: CrawlNodeDependencyLayer
            Timeout: 6
            Architectures:
                - arm64
            Environment:
                Variables:
                    TABLE_NAME: !Ref URLsTable
                    EVENT_BUS_NAME: !GetAtt CrawlServiceEventBus.Arn
Outputs:
    EventBusARN:
        Description: The ARN for the Crawl Service's Event Bus
        Value: !GetAtt CrawlServiceEventBus.Arn
    CrawlIdentityPoolID:
        Description: The identity pool that provides auth access to GraphQL API
        Value: !Ref CrawlIdentityPool
    CrawlGraphQLAPIEndpoint:
        Description: The URL for the Crawl Service's GraphQL API
        Value: !GetAtt CrawlGraphQLAPI.GraphQLUrl
    CrawlRESTAPIEndpoint:
        Description: The URL for the Crawl Service's REST API
        Value: !Sub https://${CrawlHTTPGateway}.execute-api.${AWS::Region}.amazonaws.com
