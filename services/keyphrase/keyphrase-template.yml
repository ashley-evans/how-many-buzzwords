Transform: AWS::Serverless-2016-10-31
Description: Keyphrase Service
Parameters:
    EnvironmentNameSuffix:
        Type: String
        Description: Environment name suffixed to service resources
        Default: dev
    CrawlEventBusARN:
        Type: String
        Description: The ARN of the Crawl service's Event Bus
    CrawlRESTEndpoint:
        Type: String
        Description: The endpoint for the crawl service's REST API
Resources:
    KeyphraseNodeDependencyLayer:
        Type: AWS::Serverless::LayerVersion
        Properties:
            LayerName: !Sub KeyphraseNodeDependencyLayer-${EnvironmentNameSuffix}
            Description: Common keyphrase service node module layer
            CompatibleRuntimes:
                - nodejs16.x
            ContentUri: ./functions
            RetentionPolicy: Delete
        Metadata:
            BuildMethod: makefile
    KeyphraseRepositoryLibraryLayer:
        Type: AWS::Serverless::LayerVersion
        Properties:
            LayerName: !Sub KeyphraseRepositoryLibraryLayer-${EnvironmentNameSuffix}
            Description: Library layer enabling typed access to Keyphrase Table in DynamoDB
            CompatibleRuntimes:
                - nodejs16.x
            ContentUri: ./libs/keyphrase-repository-library
            RetentionPolicy: Delete
        Metadata:
            BuildMethod: makefile
    ActiveConnectionsRepositoryLibraryLayer:
        Type: AWS::Serverless::LayerVersion
        Properties:
            LayerName: !Sub ActiveConnectionsRepositoryLibraryLayer-${EnvironmentNameSuffix}
            Description: Library layer enabling typed access to Active Connections Table in DynamoDB
            CompatibleRuntimes:
                - nodejs16.x
            ContentUri: ./libs/active-connections-repository-library
            RetentionPolicy: Delete
        Metadata:
            BuildMethod: makefile
    WebSocketClientLibraryLayer:
        Type: AWS::Serverless::LayerVersion
        Properties:
            LayerName: !Sub WebSocketClientLibraryLayer-${EnvironmentNameSuffix}
            Description: Library layer containing web socket API client implementations
            CompatibleRuntimes:
                - nodejs16.x
            ContentUri: ./libs/web-socket-client-library
            RetentionPolicy: Delete
        Metadata:
            BuildMethod: makefile
    TextRepositoryLibraryLayer:
        Type: AWS::Serverless::LayerVersion
        Properties:
            LayerName: !Sub TextRepositoryLibraryLayer-${EnvironmentNameSuffix}
            Description: Library layer containing S3 repository client for page parsed text
            CompatibleRuntimes:
                - nodejs16.x
            ContentUri: ./libs/text-repository-library
            RetentionPolicy: Delete
        Metadata:
            BuildMethod: makefile
    KeyphrasesTable:
        Type: AWS::DynamoDB::Table
        Properties:
            BillingMode: PAY_PER_REQUEST
            AttributeDefinitions:
                - AttributeName: pk
                  AttributeType: S
                - AttributeName: sk
                  AttributeType: S
                - AttributeName: kui_pk
                  AttributeType: S
            KeySchema:
                - AttributeName: pk
                  KeyType: HASH
                - AttributeName: sk
                  KeyType: RANGE
            StreamSpecification:
                StreamViewType: NEW_IMAGE
            GlobalSecondaryIndexes:
                - IndexName: KeyphraseUsageIndex
                  KeySchema:
                      - AttributeName: kui_pk
                        KeyType: HASH
                      - AttributeName: pk
                        KeyType: RANGE
                  Projection:
                      ProjectionType: KEYS_ONLY
    ParsedContentBucket:
        Type: AWS::S3::Bucket
        Properties:
            AccessControl: Private
            PublicAccessBlockConfiguration:
                BlockPublicAcls: true
                BlockPublicPolicy: true
                IgnorePublicAcls: true
                RestrictPublicBuckets: true
    FindKeyphrasesRole:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    - Effect: Allow
                      Principal:
                          Service:
                              - lambda.amazonaws.com
                      Action:
                          - sts:AssumeRole
            Path: /
            Policies:
                - PolicyName: ParsedContentBucketFetchPolicy
                  PolicyDocument:
                      Version: "2012-10-17"
                      Statement:
                          - Action:
                                - s3:GetObject
                            Resource: !Sub "${ParsedContentBucket.Arn}/*"
                            Effect: Allow
            ManagedPolicyArns:
                - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    FindKeyphrases:
        Type: AWS::Serverless::Function
        Properties:
            Handler: find-keyphrases.handler
            Role: !GetAtt FindKeyphrasesRole.Arn
            Runtime: nodejs16.x
            CodeUri: ./functions/find-keyphrases
            Description: Finds the top keywords and phrases in parsed HTML content
            Layers:
                - Ref: TextRepositoryLibraryLayer
            Timeout: 10
            Environment:
                Variables:
                    PARSED_CONTENT_S3_BUCKET_NAME: !Ref ParsedContentBucket
    KeyphrasesCRUD:
        Type: AWS::Serverless::Function
        Properties:
            Handler: keyphrases-crud.handler
            Runtime: nodejs16.x
            CodeUri: ./functions/keyphrases-crud
            Description: CRUD function for the Keyphrases Table
            Layers:
                - Ref: KeyphraseNodeDependencyLayer
            Policies:
                - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
                - Version: "2012-10-17"
                  Statement:
                      - Sid: KeyphrasesTableCRUDPolicy
                        Effect: Allow
                        Action:
                            - dynamodb:Query
                        Resource: !GetAtt KeyphrasesTable.Arn
            Environment:
                Variables:
                    TABLE_NAME: !Ref KeyphrasesTable
                    ERROR_LOGGING_ENABLED: true
    KeyphrasesCRUDAccessRole:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    - Effect: Allow
                      Principal:
                          Service:
                              - apigateway.amazonaws.com
                      Action:
                          - sts:AssumeRole
            Policies:
                - PolicyName: InvokeKeyphrasesCRUD
                  PolicyDocument:
                      Version: "2012-10-17"
                      Statement:
                          - Action:
                                - lambda:InvokeFunction
                            Resource: !GetAtt KeyphrasesCRUD.Arn
                            Effect: Allow
    KeyphraseStateMachineRole:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    - Effect: Allow
                      Principal:
                          Service:
                              - states.amazonaws.com
                      Action:
                          - sts:AssumeRole
            Policies:
                - PolicyName: InvokeFindKeyphrases
                  PolicyDocument:
                      Version: "2012-10-17"
                      Statement:
                          - Action:
                                - lambda:InvokeFunction
                            Resource: !GetAtt FindKeyphrases.Arn
                            Effect: Allow
                - PolicyName: InvokeScrapeURL
                  PolicyDocument:
                      Version: "2012-10-17"
                      Statement:
                          - Action:
                                - lambda:InvokeFunction
                            Resource: !GetAtt ScrapeURL.Arn
                            Effect: Allow
                - PolicyName: InvokeCountOccurrences
                  PolicyDocument:
                      Version: "2012-10-17"
                      Statement:
                          - Action:
                                - lambda:InvokeFunction
                            Resource: !GetAtt CountOccurrences.Arn
                            Effect: Allow
    KeyphraseStateMachine:
        Type: AWS::Serverless::StateMachine
        Properties:
            Type: STANDARD
            Tracing:
                Enabled: true
            DefinitionUri: ./keyphrase-state-machine.asl.json
            DefinitionSubstitutions:
                FindKeyphrasesARN: !GetAtt FindKeyphrases.Arn
                ScrapeURLARN: !GetAtt ScrapeURL.Arn
                CountOccurrencesARN: !GetAtt CountOccurrences.Arn
            Role: !GetAtt KeyphraseStateMachineRole.Arn
    InvokeKeyphraseStateMachineRole:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    - Effect: Allow
                      Principal:
                          Service:
                              - events.amazonaws.com
                      Action:
                          - sts:AssumeRole
            Policies:
                - PolicyName: InvokeKeyphraseStateMachine
                  PolicyDocument:
                      Version: "2012-10-17"
                      Statement:
                          - Action:
                                - states:StartExecution
                            Resource: !GetAtt KeyphraseStateMachine.Arn
                            Effect: Allow
    CrawlEventsRule:
        Type: AWS::Events::Rule
        Properties:
            Description: Starts keyphrase finding state machine per crawl complete Event
            State: ENABLED
            EventBusName: !Ref CrawlEventBusARN
            EventPattern:
                source:
                    - crawl.aws.buzzword
                detail-type:
                    - Crawl Complete via Crawl Service
            Targets:
                - Arn: !Ref KeyphraseStateMachine
                  Id: KeyphraseQueue
                  RoleArn: !GetAtt InvokeKeyphraseStateMachineRole.Arn
                  InputTransformer:
                      InputPathsMap:
                          "baseURL": "$.detail.baseURL"
                          "pathnames": "$.detail.pathnames"
                      InputTemplate: |
                          {
                            "baseURL" : <baseURL>,
                            "pathnames" : <pathnames>
                          }
    KeyphraseHTTPGateway:
        Type: AWS::Serverless::HttpApi
        Properties:
            DefinitionBody:
                Fn::Transform:
                    Name: AWS::Include
                    Parameters:
                        Location: ./keyphrase-openapi.yml
    ActiveConnectionsTable:
        Type: AWS::DynamoDB::Table
        Properties:
            BillingMode: PAY_PER_REQUEST
            AttributeDefinitions:
                - AttributeName: ConnectionID
                  AttributeType: S
                - AttributeName: ListeningURL
                  AttributeType: S
            KeySchema:
                - AttributeName: ConnectionID
                  KeyType: HASH
            StreamSpecification:
                StreamViewType: NEW_IMAGE
            GlobalSecondaryIndexes:
                - IndexName: ListeningConnectionsIndex
                  KeySchema:
                      - AttributeName: ListeningURL
                        KeyType: HASH
                      - AttributeName: ConnectionID
                        KeyType: RANGE
                  Projection:
                      ProjectionType: ALL
    ConnectionManagerRole:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    - Effect: Allow
                      Principal:
                          Service:
                              - lambda.amazonaws.com
                      Action:
                          - sts:AssumeRole
            Path: /
            Policies:
                - PolicyName: ManageConnectionTablePolicy
                  PolicyDocument:
                      Version: "2012-10-17"
                      Statement:
                          - Action:
                                - dynamodb:DescribeTable
                                - dynamodb:PutItem
                                - dynamodb:DeleteItem
                            Resource: !GetAtt ActiveConnectionsTable.Arn
                            Effect: Allow
            ManagedPolicyArns:
                - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    ConnectionManager:
        Type: AWS::Serverless::Function
        Properties:
            Handler: connection-manager.handler
            Role: !GetAtt ConnectionManagerRole.Arn
            Runtime: nodejs16.x
            CodeUri: ./functions/connection-manager
            Description: Manages active web socket connections
            Layers:
                - Ref: ActiveConnectionsRepositoryLibraryLayer
            Environment:
                Variables:
                    TABLE_NAME: !Ref ActiveConnectionsTable
    KeyphraseWebSocketGateway:
        Type: AWS::ApiGatewayV2::Api
        Properties:
            Name: !Sub buzzword-keyphrase-service-ws-${EnvironmentNameSuffix}
            ProtocolType: WEBSOCKET
            RouteSelectionExpression: "$request.body.action"
    ConnectionManagerAccessPermission:
        Type: AWS::Lambda::Permission
        Properties:
            Action: lambda:InvokeFunction
            FunctionName: !Ref ConnectionManager
            Principal: apigateway.amazonaws.com
    ConnectionIntegration:
        Type: AWS::ApiGatewayV2::Integration
        Properties:
            ApiId: !Ref KeyphraseWebSocketGateway
            IntegrationType: AWS_PROXY
            IntegrationUri: !Join
                - ""
                - - "arn:"
                  - !Ref "AWS::Partition"
                  - ":apigateway:"
                  - !Ref "AWS::Region"
                  - ":lambda:path/2015-03-31/functions/"
                  - !GetAtt ConnectionManager.Arn
                  - /invocations
    ConnectRoute:
        Type: AWS::ApiGatewayV2::Route
        Properties:
            ApiId: !Ref KeyphraseWebSocketGateway
            RouteKey: $connect
            AuthorizationType: NONE
            Target: !Join
                - "/"
                - - "integrations"
                  - !Ref ConnectionIntegration
    DisconnectRoute:
        Type: AWS::ApiGatewayV2::Route
        Properties:
            ApiId: !Ref KeyphraseWebSocketGateway
            RouteKey: $disconnect
            AuthorizationType: NONE
            Target: !Join
                - "/"
                - - "integrations"
                  - !Ref ConnectionIntegration
    ConnectionDeployment:
        Type: AWS::ApiGatewayV2::Deployment
        DependsOn:
            - ConnectRoute
            - DisconnectRoute
        Properties:
            ApiId: !Ref KeyphraseWebSocketGateway
    KeyphraseWebSocketStage:
        Type: AWS::ApiGatewayV2::Stage
        Properties:
            StageName: $default
            DeploymentId: !Ref ConnectionDeployment
            ApiId: !Ref KeyphraseWebSocketGateway
    KeyphraseWebSocketWritePolicy:
        Type: AWS::IAM::ManagedPolicy
        Properties:
            Description: Provides ability to manage web socket api connections
            PolicyDocument:
                Version: "2012-10-17"
                Statement:
                    - Action:
                          - execute-api:ManageConnections
                      Resource: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${KeyphraseWebSocketGateway}/*"
                      Effect: Allow
    NewConnectionRole:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    - Effect: Allow
                      Principal:
                          Service:
                              - lambda.amazonaws.com
                      Action:
                          - sts:AssumeRole
            Path: /
            Policies:
                - PolicyName: ActiveConnectionsTableReadStreamPolicy
                  PolicyDocument:
                      Version: "2012-10-17"
                      Statement:
                          - Action:
                                - dynamodb:DescribeStream
                                - dynamodb:GetRecords
                                - dynamodb:GetShardIterator
                                - dynamodb:ListStreams
                            Resource: !GetAtt ActiveConnectionsTable.StreamArn
                            Effect: Allow
                - PolicyName: SearchTableQueryPolicy
                  PolicyDocument:
                      Version: "2012-10-17"
                      Statement:
                          - Action:
                                - dynamodb:DescribeTable
                                - dynamodb:Query
                            Resource: !GetAtt KeyphrasesTable.Arn
                            Effect: Allow
            ManagedPolicyArns:
                - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
                - !Ref KeyphraseWebSocketWritePolicy
    NewConnection:
        Type: AWS::Serverless::Function
        Properties:
            Handler: new-connection.handler
            Role: !GetAtt NewConnectionRole.Arn
            Runtime: nodejs16.x
            CodeUri: ./functions/new-connection
            Description: Provides new connections with current database state
            Timeout: 10
            MemorySize: 256
            Layers:
                - Ref: KeyphraseRepositoryLibraryLayer
                - Ref: WebSocketClientLibraryLayer
                - Ref: ActiveConnectionsRepositoryLibraryLayer
            Events:
                ActiveConnectionsStreamEvent:
                    Type: DynamoDB
                    Properties:
                        Stream: !GetAtt ActiveConnectionsTable.StreamArn
                        BatchSize: 10
                        StartingPosition: TRIM_HORIZON
                        MaximumRetryAttempts: 5
            Environment:
                Variables:
                    TABLE_NAME: !Ref KeyphrasesTable
    UpdateConnectionsRole:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    - Effect: Allow
                      Principal:
                          Service:
                              - lambda.amazonaws.com
                      Action:
                          - sts:AssumeRole
            Path: /
            Policies:
                - PolicyName: ActiveConnectionsTableQueryPolicy
                  PolicyDocument:
                      Version: "2012-10-17"
                      Statement:
                          - Action:
                                - dynamodb:DescribeTable
                                - dynamodb:Query
                                - dynamodb:DeleteItem
                            Resource:
                                - !GetAtt ActiveConnectionsTable.Arn
                                - !Sub "${ActiveConnectionsTable.Arn}/index/ListeningConnectionsIndex"
                            Effect: Allow
                - PolicyName: SearchTableReadStreamPolicy
                  PolicyDocument:
                      Version: "2012-10-17"
                      Statement:
                          - Action:
                                - dynamodb:DescribeStream
                                - dynamodb:GetRecords
                                - dynamodb:GetShardIterator
                                - dynamodb:ListStreams
                            Resource: !GetAtt KeyphrasesTable.StreamArn
                            Effect: Allow
            ManagedPolicyArns:
                - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
                - !Ref KeyphraseWebSocketWritePolicy
    UpdateConnections:
        Type: AWS::Serverless::Function
        Properties:
            Handler: update-connections.handler
            Role: !GetAtt UpdateConnectionsRole.Arn
            Runtime: nodejs16.x
            CodeUri: ./functions/update-connections
            Description: Provides existing connections with relevant database updates
            Timeout: 10
            MemorySize: 256
            Layers:
                - Ref: KeyphraseRepositoryLibraryLayer
                - Ref: WebSocketClientLibraryLayer
                - Ref: ActiveConnectionsRepositoryLibraryLayer
            Events:
                UpdatesStreamEvent:
                    Type: DynamoDB
                    Properties:
                        Stream: !GetAtt KeyphrasesTable.StreamArn
                        BatchSize: 10
                        StartingPosition: TRIM_HORIZON
                        MaximumRetryAttempts: 5
            Environment:
                Variables:
                    TABLE_NAME: !Ref ActiveConnectionsTable
    ScrapeURLRole:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    - Effect: Allow
                      Principal:
                          Service:
                              - lambda.amazonaws.com
                      Action:
                          - sts:AssumeRole
            Path: /
            Policies:
                - PolicyName: ParsedContentBucketStorePolicy
                  PolicyDocument:
                      Version: "2012-10-17"
                      Statement:
                          - Action:
                                - s3:PutObject
                            Resource: !Sub "${ParsedContentBucket.Arn}/*"
                            Effect: Allow
            ManagedPolicyArns:
                - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    ScrapeURL:
        Type: AWS::Serverless::Function
        Properties:
            Handler: scrape-url.handler
            Role: !GetAtt ScrapeURLRole.Arn
            Runtime: nodejs16.x
            CodeUri: ./functions/scrape-url
            Description: Obtains the content for a given URL, scrapes all text from page then stores result in S3
            Layers:
                - Ref: TextRepositoryLibraryLayer
            Timeout: 10
            Environment:
                Variables:
                    CRAWL_SERVICE_REST_ENDPOINT: !Ref CrawlRESTEndpoint
                    PARSED_CONTENT_S3_BUCKET_NAME: !Ref ParsedContentBucket
    CountOccurrencesRole:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    - Effect: Allow
                      Principal:
                          Service:
                              - lambda.amazonaws.com
                      Action:
                          - sts:AssumeRole
            Path: /
            Policies:
                - PolicyName: KeyphrasesTableWritePolicy
                  PolicyDocument:
                      Version: "2012-10-17"
                      Statement:
                          - Action:
                                - dynamodb:DescribeTable
                                - dynamodb:BatchWriteItem
                            Resource: !GetAtt KeyphrasesTable.Arn
                            Effect: Allow
                - PolicyName: ParsedContentBucketFetchPolicy
                  PolicyDocument:
                      Version: "2012-10-17"
                      Statement:
                          - Action:
                                - s3:GetObject
                            Resource: !Sub "${ParsedContentBucket.Arn}/*"
                            Effect: Allow
            ManagedPolicyArns:
                - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    CountOccurrences:
        Type: AWS::Serverless::Function
        Properties:
            Handler: count-occurrences.handler
            Role: !GetAtt CountOccurrencesRole.Arn
            Runtime: nodejs16.x
            CodeUri: ./functions/count-occurrences
            Description: Obtains the content for a given URL, counts all occurrences of the provided keyphrases storing the result in DynamoDB
            Layers:
                - Ref: KeyphraseRepositoryLibraryLayer
                - Ref: TextRepositoryLibraryLayer
            Timeout: 10
            Environment:
                Variables:
                    PARSED_CONTENT_S3_BUCKET_NAME: !Ref ParsedContentBucket
                    KEYPHRASE_TABLE_NAME: !Ref KeyphrasesTable
