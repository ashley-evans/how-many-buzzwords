Transform: AWS::Serverless-2016-10-31
Description: Keyphrase Service
Parameters:
  EnvironmentNameSuffix:
    Type: String
    Description: Environment name suffixed to service resources
    Default: dev
  CrawlTopicARN:
    Type: String
    Description: The ARN of the Crawl service's SNS Topic
Resources:
  KeyphraseNodeDependencyLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: !Sub KeyphraseNodeDependencyLayer-${EnvironmentNameSuffix}
      Description: Common keyphrase service node module layer
      CompatibleRuntimes:
        - nodejs14.x
      ContentUri: ./functions
      RetentionPolicy: Delete
    Metadata:
      BuildMethod: makefile
  KeyphrasesURLsSQSQueue:
    Type: AWS::SQS::Queue
    Properties:
      VisibilityTimeout: 180 # Six times Lambda Function Timeout as per AWS recommendations
      ReceiveMessageWaitTimeSeconds: 20
  CrawlTopicQueuePublishPolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref KeyphrasesURLsSQSQueue
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - sns.amazonaws.com
            Action:
              - sqs:SendMessage
            Resource: !GetAtt KeyphrasesURLsSQSQueue.Arn
            Condition:
              ArnEquals:
                aws:sourceArn: !Ref CrawlTopicARN
  CrawlTopicSubscription:
    Type: AWS::SNS::Subscription
    DependsOn:
      - CrawlTopicQueuePublishPolicy
    Properties:
      TopicArn: !Ref CrawlTopicARN
      Endpoint: !GetAtt KeyphrasesURLsSQSQueue.Arn
      Protocol: sqs
      RawMessageDelivery: true
  KeyphrasesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: BaseUrl
          AttributeType: S
        - AttributeName: KeyPhrase
          AttributeType: S
      KeySchema:
        - AttributeName: BaseUrl
          KeyType: HASH
        - AttributeName: KeyPhrase
          KeyType: RANGE
      StreamSpecification:
        StreamViewType: NEW_IMAGE
  FindKeyphrasesFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: !Sub KeyphraseURLsSQSAccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                Resource: !GetAtt KeyphrasesURLsSQSQueue.Arn
                Effect: Allow
        - PolicyName: KeyphrasesTableWritePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                  - dynamodb:PutItem
                  - dynamodb:Query
                Resource: !GetAtt KeyphrasesTable.Arn
                Effect: Allow
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
  FindPhrasesLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: find-keyphrases.handler
      Role: !GetAtt FindKeyphrasesFunctionRole.Arn
      Runtime: nodejs14.x
      CodeUri: ./functions/find-keyphrases
      Description: Finds the top 5 key words and key phrases and stores them in DynamoDB
      Layers:
        - Ref: KeyphraseNodeDependencyLayer
      Timeout: 30
      MemorySize: 256
      Events:
        KeyphrasesURLsQueueEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt KeyphrasesURLsSQSQueue.Arn
      Environment:
        Variables:
          TABLE_NAME: !Ref KeyphrasesTable
  KeyphrasesCRUDFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: keyphrases-crud.handler
      Runtime: nodejs14.x
      CodeUri: ./functions/keyphrases-crud
      Description: CRUD function for the Keyphrases Table
      Layers:
        - Ref: KeyphraseNodeDependencyLayer
      Policies:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      - Version: '2012-10-17'
        Statement:
        - Sid: KeyphrasesTableCRUDPolicy
          Effect: Allow
          Action:
          - dynamodb:Query
          Resource: !GetAtt KeyphrasesTable.Arn
      Environment:
        Variables:
          TABLE_NAME: !Ref KeyphrasesTable
          ERROR_LOGGING_ENABLED: true
  KeyphrasesCRUDAccessRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - apigateway.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
        - PolicyName: InvokeKeyphrasesCRUDFunctionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                  - lambda:InvokeFunction
                Resource: !GetAtt KeyphrasesCRUDFunction.Arn
                Effect: Allow
  KeyphraseHTTPGateway:
    Type: AWS::Serverless::HttpApi
    Properties:
      DefinitionBody:
        Fn::Transform:
          Name: AWS::Include
          Parameters:
            Location: ./keyphrase-openapi.yml
  # Web socket resources 
  ActiveConnectionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: ConnectionId
          AttributeType: S
        - AttributeName: SearchKey
          AttributeType: S
      KeySchema:
        - AttributeName: ConnectionId
          KeyType: HASH
      StreamSpecification:
        StreamViewType: NEW_IMAGE
      GlobalSecondaryIndexes:
        - IndexName: SearchKeyIndex
          KeySchema:
            - AttributeName: SearchKey
              KeyType: HASH
          Projection:
            ProjectionType: ALL
  ConnectionManagerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: ManageConnectionTablePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                  - dynamodb:PutItem
                  - dynamodb:DeleteItem
                Resource: !GetAtt ActiveConnectionsTable.Arn
                Effect: Allow
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
  ConnectionManager:
    Type: AWS::Serverless::Function
    Properties:
      Handler: connection-manager.handler
      Role: !GetAtt ConnectionManagerRole.Arn
      Runtime: nodejs14.x
      CodeUri: ./functions/connection-manager
      Description: Manages active web socket connections
      Layers:
        - Ref: KeyphraseNodeDependencyLayer
      Environment:
        Variables:
          TABLE_NAME: !Ref ActiveConnectionsTable
          ERROR_LOGGING_ENABLED: true
          SEARCH_KEY: BaseUrl
          SEARCH_KEY_PATTERN: '^(www\.)?[-a-zA-Z0-9@:%._\+~#=]{2,256}\.[a-z]{2,6}\b([-a-zA-Z0-9@:%_\+.~#?&//=]*)$'
  KeyphraseWebSocketGateway:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: !Sub buzzword-keyphrase-service-ws-${EnvironmentNameSuffix}
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: "$request.body.action"
  ConnectionManagerAccessPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref ConnectionManager
      Principal: apigateway.amazonaws.com
  ConnectionIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref KeyphraseWebSocketGateway
      IntegrationType: AWS_PROXY
      IntegrationUri: !Join
        - ''
        - - 'arn:'
          - !Ref 'AWS::Partition'
          - ':apigateway:'
          - !Ref 'AWS::Region'
          - ':lambda:path/2015-03-31/functions/'
          - !GetAtt ConnectionManager.Arn
          - /invocations
  ConnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref KeyphraseWebSocketGateway
      RouteKey: $connect
      AuthorizationType: NONE
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref ConnectionIntegration
  DisconnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref KeyphraseWebSocketGateway
      RouteKey: $disconnect
      AuthorizationType: NONE
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref ConnectionIntegration
  ConnectionDeployment:
    Type: AWS::ApiGatewayV2::Deployment
    DependsOn:
      - ConnectRoute
      - DisconnectRoute
    Properties:
      ApiId: !Ref KeyphraseWebSocketGateway
  KeyphraseWebSocketStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      StageName: $default
      DeploymentId: !Ref ConnectionDeployment
      ApiId: !Ref KeyphraseWebSocketGateway
  KeyphraseWebSocketWritePolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: Provides ability to manage web socket api connections
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
              - execute-api:ManageConnections
            Resource: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${KeyphraseWebSocketGateway}/*"
            Effect: Allow
  NewConnectionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: ActiveConnectionsTableReadStreamPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                  - dynamodb:DescribeStream
                  - dynamodb:GetRecords
                  - dynamodb:GetShardIterator
                  - dynamodb:ListStreams
                Resource: !GetAtt ActiveConnectionsTable.StreamArn
                Effect: Allow
        - PolicyName: SearchTableQueryPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                  - dynamodb:Query
                Resource: !GetAtt KeyphrasesTable.Arn
                Effect: Allow
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole   
        - !Ref KeyphraseWebSocketWritePolicy
  NewConnection:
    Type: AWS::Serverless::Function
    Properties:
      Handler: new-connection.handler
      Role: !GetAtt NewConnectionRole.Arn
      Runtime: nodejs14.x
      CodeUri: ./functions/new-connection
      Description: Provides new connections with current database state
      Layers:
        - Ref: KeyphraseNodeDependencyLayer
      Events:
        ActiveConnectionsStreamEvent:
          Type: DynamoDB
          Properties:
            Stream: !GetAtt ActiveConnectionsTable.StreamArn
            BatchSize: 10
            StartingPosition: TRIM_HORIZON
      Environment:
        Variables:
          TABLE_NAME: !Ref KeyphrasesTable
          SEARCH_KEY: BaseUrl
          SEARCH_KEY_PATTERN: '^(www\.)?[-a-zA-Z0-9@:%._\+~#=]{2,256}\.[a-z]{2,6}\b([-a-zA-Z0-9@:%_\+.~#?&//=]*)$'
  UpdateConnectionsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: ActiveConnectionsTableQueryPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                  - dynamodb:Query
                  - dynamodb:DeleteItem
                Resource:
                  - !GetAtt ActiveConnectionsTable.Arn
                  - !Sub "${ActiveConnectionsTable.Arn}/index/SearchKeyIndex"
                Effect: Allow
        - PolicyName: SearchTableReadStreamPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                  - dynamodb:DescribeStream
                  - dynamodb:GetRecords
                  - dynamodb:GetShardIterator
                  - dynamodb:ListStreams
                Resource: !GetAtt KeyphrasesTable.StreamArn
                Effect: Allow
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole   
        - !Ref KeyphraseWebSocketWritePolicy
  UpdateConnections:
    Type: AWS::Serverless::Function
    Properties:
      Handler: update-connections.handler
      Role: !GetAtt UpdateConnectionsRole.Arn
      Runtime: nodejs14.x
      CodeUri: ./functions/update-connections
      Description: Provides existing connections with relevant database updates
      Layers:
        - Ref: KeyphraseNodeDependencyLayer
      Events:
        UpdatesStreamEvent:
          Type: DynamoDB
          Properties:
            Stream: !GetAtt KeyphrasesTable.StreamArn
            BatchSize: 10
            StartingPosition: TRIM_HORIZON
      Environment:
        Variables:
          TABLE_NAME: !Ref ActiveConnectionsTable
          INDEX_NAME: SearchKeyIndex
          SEARCH_KEY: BaseUrl
