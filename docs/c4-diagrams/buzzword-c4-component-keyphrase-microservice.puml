@startuml Buzzword C4 Component Diagram

!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Component.puml

title Component Diagram for the How many Buzzwords System - Keyphrase Microservice

Container(single_page_application, "Single-Page Application", "React and Typescript", $descr="Provides ability to initiate crawls of websites and view buzzword statistics for provided website via user's web browser")
Container(crawl_microservice, "Crawl Microservice", "Lambda, TypeScript, Step Functions, and Event Bridge", $descr="Provides ability to crawl website and gather website HTML content via a REST API. Notifies subscribing services via events on a bus")

Container_Boundary(keyphrase_microservice_boundary, "Keyphrase Microservice") {
    Component(http_api_gateway, "HTTP API Gateway", "API Gateway", "Routes requests from clients to relevant components")
    Component(ws_api_gateway, "WebSocket API Gateway", "API Gateway", "Enables bi-directional communication with user via a WebSocket connection, allowing the service to push updates automatically to subscribed users")
    Component(step_function, "Keyphrase Finding Step Function", "Step Functions", "Orchestrates keyphrase analysis and occurrence counting on a set of URLs")
    Component(scrape_url_lambda, "Scrape URL Lambda", "Lambda and TypeScript", "Retrieves and parses HTML content for a given URL")
    Component(find_keyphrases_lambda, "Find Keyphrases Lambda", "Lambda and TypeScript", "Performs keyphrase analysis on page content")
    Component(count_occurrences_lambda, "Count Occurrences Lambda", "Lambda and TypeScript", "Counts the number of occurrences for a set of keyphrases on a given page")
    Component(crud_lambda, "Keyphrases CRUD Lambda", "Lambda and TypeScript", "Provides CRUD functionality for the keyphrase and occurrence data")
    Component(total_lambda, "Total Lambda", "Lambda and TypeScript", "Totals occurrences of keyphrases across a given site and across all sites")
    Component(update_connections_lambda, "Update Connections Lambda", "Lambda and TypeScript", "Updates listening clients with relevant changes to the keyphrase and occurrence data")
    Component(new_connection_lambda, "New Connection Lambda", "Lambda and TypeScript", "Provides new clients with the current keyphrase and occurrence data related to their provided URL")
    Component(connection_manager_lambda, "Connection Manager Lambda", "Lambda and TypeScript", "Manages client connections and disconnections")
}

ContainerDb(keyphrase_db, "Keyphrase and Occurrence Database", "DynamoDB", "Stores keyphrases found on a given URL and corresponding occurrence counts")
ContainerDb(active_connections_db, "Active Connections Database", "DynamoDB", "Stores listening WebSocket client details and corresponding URLs")
ContainerDb(parsed_content_db, "Parsed Content Database", "S3", "Caches parsed HTML from websites")

Rel(http_api_gateway, crud_lambda, "Routes requests to get current keyphrase and occurrence state for a given URLs to")

Rel(crud_lambda, keyphrase_db, "Retrieves relevant current keyphrase and occurrence state from", "DynamoDB Client")

BiRel_D(single_page_application, ws_api_gateway, "Subscribes to keyphrase results from", "WebSocket")

Rel_D(ws_api_gateway, connection_manager_lambda, "Sends connection and disconnection requests to")

Rel(connection_manager_lambda, active_connections_db, "Writes or deletes from")

Rel(new_connection_lambda, active_connections_db, "Listens to new connections from", "DynamoDB Stream")
Rel(new_connection_lambda, keyphrase_db, "Retrieves current relevant keyphrase and occurrence state from", "Dynamoose")
Rel_U(new_connection_lambda, ws_api_gateway, "Sends current relevant keyphrase and occurrence state to",  "API Gateway Management Client")

Rel(crawl_microservice, step_function, "Starts execution upon crawl complete event received")

Rel(step_function, scrape_url_lambda, "Uses per URL provided")
Rel(step_function, find_keyphrases_lambda, "Uses per URL provided")
Rel(step_function, count_occurrences_lambda, "Uses per URL provided")

Rel(scrape_url_lambda, crawl_microservice, "Gets content for analysis using", "HTTP")
Rel(scrape_url_lambda, parsed_content_db, "Writes to", "S3 Client")

Rel(find_keyphrases_lambda, parsed_content_db, "Reads from", "S3 Client")

Rel(count_occurrences_lambda, keyphrase_db, "Writes to", "Dynamoose")
Rel(count_occurrences_lambda, parsed_content_db, "Reads from", "S3 Client")

Rel(update_connections_lambda, keyphrase_db, "Listens to new keyphrases and occurrences from", "DynamoDB Stream")
Rel(update_connections_lambda, active_connections_db, "Retrieves relevant listening client details from", "Dynamoose")
Rel_U(update_connections_lambda, ws_api_gateway, "Sends new keyphrase and occurrence state to", "API Gateway Management Client")

BiRel(total_lambda, keyphrase_db, "Listens to occurrence updates, updating totals to reflect changes", "DynamoDB Stream")

Lay_L(single_page_application, crawl_microservice)
Lay_R(total_lambda, crud_lambda)

SHOW_LEGEND()

@enduml
